name: Build , Push and Deploy

on:
  push:
    branches:
      - main
  

jobs:
  build:
    runs-on: ubuntu-latest
    env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}        
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID}}
        ECR_REPOSITORY: xyvin-internal/ticketing-system
        IMAGE_TAG: latest
        SERVICE_NAME: backend

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.x' 
        
    - name: Install Dependencies & build frontend
      run: |
        cd frontend
        npm install
        npm run build
        
    - name: Move Build to Backend
      run: |
          mv frontend/build backend/

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and Push Docker image
      env:        
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

      run: |    
        cd ${{env.SERVICE_NAME}}
        docker build -t ${{env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Deploy to EC2
      env:

          SSH_KEY: ${{ secrets.XYVIN_INTERNAL_SSH }}
          EC2_INSTANCE_IP:  ${{ secrets.EC2_INSTANCE_IP}}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
          USERNAME: ubuntu
          CONTAINER_NAME: ticketing-system-container
          PORT: 4000

      uses: appleboy/ssh-action@master
      with:
          host: ${{ env.EC2_INSTANCE_IP }}
          username: ${{ env.USERNAME }}
          key: ${{ env.SSH_KEY}}
          script: |

            # Refresh ECR login
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
           
            # Pull Docker Image
            sudo docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true

            sudo docker run -d \
              -p ${{ env.PORT }}:${{ env.PORT }}\
              --name ${{ env.CONTAINER_NAME }} \
              -e ENVIRONMENT=production \
               ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
              
            # Clean up old Docker images
            sudo docker system prune -af